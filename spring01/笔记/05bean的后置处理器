后置处理器
    1. 实现BeanPostProcessor接口
    2. 该处理器/对象会在bean 初始化方法(init)调用前和初始化方法调用后被调用
        什么意思 这个后置处理器在什么时候被调用?
            在Bean的init方法前被调用
            在Bean的init方法后被调用
                和你调用不调用指定的bean没关系 这个是在bean加载的时候就会被调用
    3. 已经是针对所有对象编程->切面编程AOP
        这个处理器会过滤所有的bean ->
            在postProcessBeforeInitialization和postProcessAfterInitialization
            加入你需要的过滤方法 从而对指定的bean进行操作，并实现业务逻辑
                举个例子
                    1、怎么执行到这个方法?=> 使用AOP(反射+动态代理+IO+容器+注解)
                    2、有什么用？=> 可以对IOC 容器中所有的对象进行统一处理,比如日志处理/权限的校
                    验/安全的验证/事务管理.
                    -初步体验案例: 如果类型是House 的统一改成上海豪宅
                    3、针对容器的所有对象吗? 是的=>切面编程特点

    配置的写法
        <!--配置House对象-->
        <bean class="com.hspedu.spring.bean.House" id="house"
              init-method="init"
              destroy-method="destroy">
            <property name="name" value="大豪宅"/>
        </bean>

        <bean class="com.hspedu.spring.bean.House" id="house02"
              init-method="init"
              destroy-method="destroy">
            <property name="name" value="香港豪宅"/>
        </bean>

        <!--配置了一个Monster对象-->

        <!--配置后置处理器对象
        老师解读
        1. 当我们在beans02.xml 容器配置文件 配置了 MyBeanPostProcessor
        2. 这时后置处理器对象，就会作用在该容器创建的所有Bean对象，自己在后置处理器中筛选要的对象
        3. 已经是针对所有对象编程->切面编程AOP
        -->
        <bean class="com.hspedu.spring.bean.MyBeanPostProcessor" id="myBeanPostProcessor"/>


    处理器的写法
        public class MyBeanPostProcessor implements BeanPostProcessor {

            /**
             * 什么时候被调用: 在Bean的init方法前被调用
             * @param bean 传入的在IOC容器中创建/配置Bean
             * @param beanName 传入的在IOC容器中创建/配置Bean的id
             * @return Object 程序员对传入的bean 进行修改/处理【如果有需要的话】 ,返回
             * @throws BeansException
             */

            @Override
            public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
                System.out.println("postProcessBeforeInitialization().. bean="
                        + bean + " beanName=" + beanName);

                //初步体验案例: 如果类型是House的统一改成 上海豪宅
                //对多个对象进行处理/编程==>切面编程
                if(bean instanceof House) {
                    ((House)bean).setName("上海豪宅~");
                }
                return bean;
            }

            /**
             * 什么时候被调用: 在Bean的init方法后被调用
             * @param bean  传入的在IOC容器中创建/配置Bean
             * @param beanName 传入的在IOC容器中创建/配置Bean的id
             * @return 程序员对传入的bean 进行修改/处理【如果有需要的话】 ,返回
             * @throws BeansException
             */

            @Override
            public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
                System.out.println("postProcessAfterInitialization().. bean="
                        + bean + " beanName=" + beanName);
                return bean;
            }
        }
类的写法
    类的写法
        public class House {
            private String name;

            public House() {
                System.out.println("House() 构造器...");
            }

            public String getName() {
                return name;
            }

            public void setName(String name) {
                System.out.println("House setName()=" + name);
                this.name = name;
            }

            //老师解读
            //1. 这个方法是程序员来编写的.
            //2. 根据自己的业务逻辑来写.
            public void init() {
                System.out.println("House init()..");
            }

            //老师解读
            //1. 这个方法是程序员来编写的.
            //2. 根据自己的业务逻辑来写.
            //3. 名字也不是固定的
            public void destroy() {
                System.out.println("House destroy()..");
            }

            @Override
            public String toString() {
                return "House{" +
                        "name='" + name + '\'' +
                        '}';
            }
        }
