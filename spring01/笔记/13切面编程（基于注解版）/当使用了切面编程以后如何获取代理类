 @Test
    public void smartDogTestByProxy() {

        //得到spring容器
        ApplicationContext ioc =
                new ClassPathXmlApplicationContext("beans08.xml");
        //当开启注解以后 就不能直接获得bean了
//        开启了注解<aop:aspectj-autoproxy/>
//          这样写会报错
//        float smartDog = ioc.getBean("smartDog", SmartDog.class).getSum(10, 2);
//        System.out.println(smartDog);

        //这里我们需要通过接口类型来获取到注入的SmartDog对象-就是代理对象
//        现在返回来的全部是实现了特定接口的代理对象 而不是原来的实现类（不是smartDog而是实现了SmartAnimalable接口的proxy ）
//          以后的获取全部要用接口类型来获得
//        原生的smartDog还是存在singletonObjects中 但是当我们调用的时候 其执行过程类似之前手写的proxy get返回代理对象，因此我们获取到的是代理对象
        //被代理的对象在加载的过程中放到了singletonObjects中
            我们要不然用接口来获得 （前提是一对一，多个实现类的时候不能用接口来接受）
//        SmartAnimalable smartAnimalable =
//                ioc.getBean(SmartAnimalable.class);

//        这里也可以用名字来接受 但是要强制转型一下
        SmartAnimalable smartAnimalable =
                (SmartAnimalable)ioc.getBean("smartDog");

        smartAnimalable.getSum(10, 2);

        System.out.println("=============================");


    }